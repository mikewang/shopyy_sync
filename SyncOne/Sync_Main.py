# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Sync_Main_Form.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
 #导入程序运行必须模块
import sys
import datetime
import os
import configparser
import logging
#PyQt5中使用的基本控件都在PyQt5.QtWidgets模块中
from PyQt5.QtCore import pyqtSignal, Qt
from PyQt5.QtWidgets import QApplication, QMainWindow
from PyQt5.QtGui import QPixmap
#导入designer工具生成的login模块
from SyncOne.Sync_Main_Form import Ui_Form as MainForm
from SyncOne.Dialog_Form import Ui_Dialog as DialogForm
from SyncOne.Spec_Form import Ui_Form as SpecForm
from SyncOne.Sync_Worker import SyncWorker as Worker
from SyncOne import Scheduler, global_v as gl
from SyncOne.Sync_Dao import SyncDao as Dao


class MainWindow(QMainWindow, MainForm):
    _title = "ShopYY单网站数据同步"
    _product_spec_first = None
    _default_scheduler = None

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.setupUi(self)
        self.setWindowTitle(self._title)
        self._default_scheduler = Scheduler.Scheduler()
        logging.basicConfig(format='%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s',
                            level=logging.WARNING,
                            filename='etlshopyy.log',
                            filemode='a')
        self.checkBox_product_auto_sync.stateChanged.connect(self.start_auto_sync)
        # btn_product_offline_sync
        self.btn_product_sync.clicked.connect(lambda: self.call_sync_dialg())
        self.btn_product_single_sync.clicked.connect(lambda: self.start_selected_sync())
        self.btn_product_sync_stop.clicked.connect(lambda: self.stop_sync())

        self.btn_product_query.clicked.connect(self.query_product_info)
        self.btn_spec_list.clicked.connect(self.query_spec_list)

        self.workerThread = Worker()
        self.workerThread.signal.connect(self.callback_worker)

    def start_auto_sync(self, state):
        if state == Qt.Checked:
            print(" schedule start", datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            self.setWindowTitle(self._title + " 自动化开启，每天0点全量同步，每5分钟增量同步")
            self.sync_scheduler()
        else:
            self._default_scheduler.clear()
            print(" schedule stop", datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            self.setWindowTitle(self._title)

    def sync_scheduler(self):
        self._default_scheduler.every(5).minutes.do(self.scheduler_sync_recent)
        self._default_scheduler.every().day.at("01:01").do(self.scheduler_sync_full)
        self._default_scheduler.run_continuously(1)

    def scheduler_sync_full(self):
        try:
            sync_name = "自动化全量同步"
            print(sync_name, "开始", datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            logging.warning(sync_name + " 开始")
            self.listWidget.addItem(sync_name + " 开始 " + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            if self.workerThread.isRunning():
                message = sync_name + " 上一次未完成，此次同步取消 " + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                self.listWidget.addItem(message)
                self.listWidget.scrollToBottom()
                logging.warning(sync_name + "上一次未完成，此次取消")
                return
            self.workerThread.sync_sleep_time = 0
            self.workerThread.selected_goodscode = ""
            gl.force_download_file = False

            # 同步分类
            worker = {"name": "sync_product_type", "domain_name": gl.single_website_domain, "token": gl.single_website_token}
            self.workerThread.worker_list = [worker]

            # 同步产品
            worker = {"name": "sync_product_info_full", "domain_name": gl.single_website_domain, "token": gl.single_website_token}
            self.workerThread.worker_list.append(worker)

            worker = {"name": "sync_product_info_full_offline", "domain_name": gl.single_website_domain, "token": gl.single_website_token}
            self.workerThread.worker_list.append(worker)

            print("workerThread start", self.workerThread)
            self.workerThread.start()
            logging.warning(sync_name + " 提交到后台线程")
            
        except Exception as e:
            print(e)

    def scheduler_sync_recent(self):
        try:
            sync_name = "自动化增量同步"
            print(sync_name, "开始", datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            logging.warning(sync_name + " 开始")
            self.listWidget.addItem(sync_name + " 开始 " + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            if self.workerThread.isRunning():
                logging.warning(sync_name + "上一次未完成，此次取消")
                message = sync_name + " 上一次未完成，此次同步取消 " + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                self.listWidget.addItem(message)
                self.listWidget.scrollToBottom()
                return
            self.workerThread.sync_sleep_time = 0
            self.workerThread.selected_goodscode = ""
            gl.force_download_file = False
            # 同步产品
            worker = {"name": "sync_product_info_recent", "domain_name": gl.single_website_domain, "token": gl.single_website_token}
            self.workerThread.worker_list = [worker]

            worker = {"name": "sync_product_info_recent_offline", "domain_name": gl.single_website_domain, "token": gl.single_website_token}
            self.workerThread.worker_list.append(worker)

            print("workerThread start", self.workerThread)
            self.workerThread.start()
            logging.warning(sync_name + " 提交到后台线程")
            
        except Exception as e:
            print(e)

    def start_full_sync(self, sleep_time, force_download):
        try:
            sync_name = "全量同步"
            print(sync_name, "开始", datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            self.listWidget.addItem(sync_name + " 开始 " + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            if self.workerThread.isRunning():
                message = sync_name + " 上一次未完成，此次同步取消 " + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                self.listWidget.addItem(message)
                self.listWidget.scrollToBottom()
                return
            self.workerThread.sync_sleep_time = sleep_time
            self.workerThread.selected_goodscode = ""
            # if "否" in self.comboBox_download_file.currentText():
            #     gl.force_download_file = False
            # else:
            #     gl.force_download_file = True
            gl.force_download_file = force_download
            # 同步分类
            worker = {"name":"sync_product_type", "domain_name":gl.single_website_domain,"token":gl.single_website_token}
            self.workerThread.worker_list = [worker]

            # 同步产品
            worker = {"name":"sync_product_info_full", "domain_name":gl.single_website_domain,"token":gl.single_website_token}
            self.workerThread.worker_list.append(worker)

            print("workerThread start", self.workerThread)
            self.workerThread.start()
            
        except Exception as e:
            print(e)

    def start_recent_sync(self, sleep_time, force_download):
        try:
            sync_name = "增量同步"
            print(sync_name, "开始", datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            self.listWidget.addItem(sync_name + " 开始 " + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            if self.workerThread.isRunning():
                message = sync_name + " 上一次未完成，此次同步取消 " + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                self.listWidget.addItem(message)
                self.listWidget.scrollToBottom()
                return
            self.workerThread.sync_sleep_time = sleep_time
            self.workerThread.selected_goodscode = ""
            # if "否" in self.comboBox_download_file.currentText():
            #     gl.force_download_file = False
            # else:
            #     gl.force_download_file = True
            gl.force_download_file = force_download
            # 同步产品
            worker = {"name":"sync_product_info_recent", "domain_name":gl.single_website_domain,"token":gl.single_website_token}
            self.workerThread.worker_list.append(worker)

            print("workerThread start", self.workerThread)
            self.workerThread.start()
            
        except Exception as e:
            print(e)

    def start_selected_sync(self):
        try:
            sync_name = "指定产品同步"
            print(sync_name, "开始", datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            self.listWidget.addItem(sync_name + " 开始 " + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            if self.workerThread.isRunning():
                message = sync_name + " 上一次未完成，此次同步取消 " + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                self.listWidget.addItem(message)
                self.listWidget.scrollToBottom()
                return
            goodscode = self.input_goodscode.text()
            self.workerThread.selected_goodscode = goodscode.strip()
            self.workerThread.sync_sleep_time = 0
            gl.force_download_file = True

            # 同步产品
            worker = {"name":"sync_product_info_selected", "domain_name":gl.single_website_domain,"token":gl.single_website_token}
            self.workerThread.worker_list = [worker]
            print("workerThread start", self.workerThread)
            self.workerThread.start()
        except Exception as e:
            print(e)

    def start_full_offline_sync(self, sleep_time):
        try:
            sync_name = "全量下架产品同步"
            print(sync_name, "开始", datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            self.listWidget.addItem(sync_name + " 开始 " + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            if self.workerThread.isRunning():
                message = sync_name + " 上一次未完成，此次同步取消 " + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                self.listWidget.addItem(message)
                self.listWidget.scrollToBottom()
                return
            self.workerThread.sync_sleep_time = sleep_time

            # 同步产品
            worker = {"name":"sync_product_info_full_offline", "domain_name":gl.single_website_domain,"token":gl.single_website_token}
            self.workerThread.worker_list = [worker]

            print("workerThread start", self.workerThread)
            self.workerThread.start()
        except Exception as e:
            print(e)

    def start_recent_offline_sync(self, sleep_time):
        try:
            sync_name = "增量下架产品同步"
            print(sync_name, "开始", datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            self.listWidget.addItem(sync_name + " 开始 " + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            if self.workerThread.isRunning():
                message = sync_name + " 上一次未完成，此次同步取消 " + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                self.listWidget.addItem(message)
                self.listWidget.scrollToBottom()
                return
            self.workerThread.sync_sleep_time = sleep_time
            # 同步产品
            worker = {"name":"sync_product_info_recent_offline", "domain_name":gl.single_website_domain,"token":gl.single_website_token}
            self.workerThread.worker_list = [worker]

            print("workerThread start", self.workerThread)
            self.workerThread.start()
        except Exception as e:
            print(e)

    def stop_sync(self):
        try:
            self.listWidget.addItem("同步预停止, " + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            gl.worker_thread_isRunning = False
            self.listWidget.addItem("同步已停止, " + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
        except Exception as e:
            print(e)

    def call_sync_dialg(self):
        try:
            dialog = DialogSync()
            dialog.setWindowTitle("产品下架")
            dialog.signal.connect(self.callback_sync_dialog)
            dialog.show()
        except Exception as e:
            print(e)

    def callback_worker(self, signal_emit):
        if "action" in signal_emit:
            action = signal_emit["action"]
            if action == "begin":
                self.listWidget.clear()
                self.listWidget.addItem("开始, " + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            elif action == "end":
                self.listWidget.addItem("完成, " + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
                self.listWidget.scrollToBottom()
        elif "message" in signal_emit:
            message = signal_emit["message"]
            self.listWidget.addItem(message)
            self.listWidget.scrollToBottom()
        elif "product.py" in signal_emit:
            prod = signal_emit["product.py"]
            ProductID = ''
            GoodsCode = ''
            GoodsEName = ''
            ProductActive = ''
            if prod is not None:
                if "sync_no" in prod:
                    sync_no = prod["sync_no"]
                    self.groupBox.setTitle("第" + sync_no + "个产品基本信息")
                ProductID = str(prod["ProductID"])
                GoodsCode = prod["GoodsCode"]
                GoodsEName = prod["GoodsEName"]
                ProductActive = prod["ProductActive"]
                self.btn_spec_list.setText("产品规格")
            else:
                self.label_product_logo.setText("logo")
                self.label_product_logo.show()
                self.btn_spec_list.setText("产品规格")
                self._product_spec_first = None
            self.input_product_id.setText(ProductID)
            self.input_goodscode.setText(GoodsCode)
            self.input_product_active.setText(ProductActive)
            self.input_product_name.setText(GoodsEName)
        elif "product_image" in signal_emit:
            product_image = signal_emit["product_image"]
            if product_image is not None:
                ThumbImage = product_image["ThumbImage"]
                # 显示缩略图
                pix = QPixmap()
                pix.loadFromData(ThumbImage, "JPEG", Qt.ImageConversionFlag.AutoColor)
                self.label_product_logo.setPixmap(pix)
                self.label_product_logo.setScaledContents(True)
                self.label_product_logo.show()
            else:
                self.label_product_logo.setText("产品主图为空")
                self.label_product_logo.show()
        elif "product_spec_first" in signal_emit:
            product_spec_first = signal_emit["product_spec_first"]
            self._product_spec_first = product_spec_first
            if product_spec_first is not None:
                cc = product_spec_first["cc"]
                self.btn_spec_list.setText("产品规格：" + str(cc) + "个")
            else:
                self.btn_spec_list.setText("产品规格")
        else:
            print("callback", signal_emit)

    def callback_sync_dialog(self, signal_emit):
        if "action" in signal_emit:
            action = signal_emit["action"]
            if action == "full_online":
                sleep_time = signal_emit["sleep_time"]
                force_download = signal_emit["force_download"]
                self.start_full_sync(sleep_time, force_download)
            elif action == "recent_online":
                sleep_time = signal_emit["sleep_time"]
                force_download = signal_emit["force_download"]
                self.start_recent_sync(sleep_time, force_download)
            elif action == "full_offline":
                sleep_time = signal_emit["sleep_time"]
                self.start_full_offline_sync(sleep_time)
            elif action == "recent_offline":
                sleep_time = signal_emit["sleep_time"]
                self.start_recent_offline_sync(sleep_time)
        else:
            print("callback", signal_emit)

    def query_product_info(self):
        GoodsCode = self.input_goodscode.text().strip()
        self.workerThread.selected_goodscode = GoodsCode
        worker = {"name": "query_product_info", "domain_name": gl.single_website_domain, "token": gl.pf_token}
        self.workerThread.worker_list = [worker]
        self.workerThread.start()

    def query_spec_list(self):
        if self._product_spec_first is not None:
            windowSpec = WindowSpec(self._product_spec_first)
            windowSpec.setWindowTitle("产品:" + self.input_goodscode.text())
            windowSpec.show()


class DialogSync(QMainWindow, DialogForm):
    signal = pyqtSignal(dict)

    def __init__(self):
        super().__init__()
        self.setupUi(self)
        print("initial", self)
        self.btn_cancel.clicked.connect(lambda: self.cancel_dialog())
        self.btn_full_sync.clicked.connect(lambda: self.check_full_online())
        self.btn_recent_sync.clicked.connect(lambda: self.check_recent_online())
        self.btn_offline_full_sync.clicked.connect(lambda: self.check_full_offline())
        self.btn_offline_recent_sync.clicked.connect(lambda: self.check_recent_offline())

    def cancel_dialog(self):
        self.close()

    def check_full_online(self):
        signal_emit = dict()
        signal_emit["action"] = "full_online"
        signal_emit["sleep_time"] = int(self.comboBox_sleep_time.currentText())
        if "否" in self.comboBox_download_file.currentText():
            signal_emit["force_download"] = False
        else:
            signal_emit["force_download"] = True
        self.signal.emit(signal_emit)
        self.close()

    def check_recent_online(self):
        signal_emit = dict()
        signal_emit["action"] = "recent_online"
        signal_emit["sleep_time"] = int(self.comboBox_sleep_time.currentText())
        if "否" in self.comboBox_download_file.currentText():
            signal_emit["force_download"] = False
        else:
            signal_emit["force_download"] = True
        self.signal.emit(signal_emit)
        self.close()

    def check_full_offline(self):
        signal_emit = dict()
        signal_emit["action"] = "full_offline"
        signal_emit["sleep_time"] = int(self.comboBox_sleep_time.currentText())
        if "否" in self.comboBox_download_file.currentText():
            signal_emit["force_download"] = False
        else:
            signal_emit["force_download"] = True
        self.signal.emit(signal_emit)
        self.close()

    def check_recent_offline(self):
        signal_emit = dict()
        signal_emit["action"] = "recent_offline"
        signal_emit["sleep_time"] = int(self.comboBox_sleep_time.currentText())
        if "否" in self.comboBox_download_file.currentText():
            signal_emit["force_download"] = False
        else:
            signal_emit["force_download"] = True
        self.signal.emit(signal_emit)
        self.close()


class WindowSpec(QMainWindow, SpecForm):
    signal = pyqtSignal(dict)
    _product_spec = None

    def __init__(self, spec):
        super().__init__()
        self.setupUi(self)
        print("initial", self)
        self.btn_prev_spec.clicked.connect(lambda: self.show_prev_spec())
        self.btn_next_spec.clicked.connect(lambda: self.show_next_spec())
        self._product_spec = spec
        self.showSpec()

        # spec["cc"] = row[0]
        # spec["rowno"] = row[1]
        # spec["ProductID"] = row[2]
        # spec["SpecNo"] = row[3]
        # spec["GoodsSpec"] = row[4]
        # spec["ImageGUID"] = row[7]
        # spec["FileDate"] = row[8]
        # spec["ThumbImage"] = row[9]
        # spec["specActive"] = row[10]
        # spec["status"] = row[11]
        # spec["ImageFilePath"] = file_path

    def showSpec(self):
        rowno = self._product_spec["rowno"]
        cc = self._product_spec["cc"]
        self.label_rowno_cc.setText("(" + str(rowno) + "/" + str(cc) + ")")
        self.input_spec_no.setText(self._product_spec["SpecNo"])
        self.input_status.setText(self._product_spec["status"])
        self.input_spec_active.setText(self._product_spec["specActive"])
        self.input_goods_spec.setText(self._product_spec["GoodsSpec"])

        ThumbImage = self._product_spec["ThumbImage"]
        # 显示缩略图
        if ThumbImage is not None:
            pix = QPixmap()
            pix.loadFromData(ThumbImage, "JPEG", Qt.ImageConversionFlag.AutoColor)
            self.label_spec_logo.setPixmap(pix)
            self.label_spec_logo.setScaledContents(True)
            self.label_spec_logo.show()
        else:
            self.label_spec_logo.setText("规格图为空")

    def show_prev_spec(self):
        rowno = self._product_spec["rowno"]
        cc = self._product_spec["cc"]
        if rowno - 1 < 1:
            rowno = cc
        else:
            rowno = rowno -1
        dao = Dao()
        product_spec = dao.select_product_spec_image(self._product_spec["ProductID"], rowno)
        self._product_spec = product_spec
        self.showSpec()

    def show_next_spec(self):
        rowno = self._product_spec["rowno"]
        cc = self._product_spec["cc"]
        if rowno + 1 > cc:
            rowno = 1
        else:
            rowno = rowno + 1
        dao = Dao()
        product_spec = dao.select_product_spec_image(self._product_spec["ProductID"], rowno)
        self._product_spec = product_spec
        self.showSpec()


if __name__ == '__main__':
    # pds = [1,2,3]
    # pds.insert(3,4)
    # print(pds)
    config = configparser.ConfigParser()
    init_file = os.path.normpath(os.path.join(os.curdir, "config", "ymcart.ini"))
    config.read(init_file)
    gl.single_website_domain = config.get("api_single_website", "domain_name")
    gl.single_website_token = config.get("api_single_website", "core_token")
    gl.single_website_name = config.get("api_single_website", "website_name")

    app = QApplication(sys.argv)
    mainWindow = MainWindow()
    mainWindow.show()
    sys.exit(app.exec_())
    # the end